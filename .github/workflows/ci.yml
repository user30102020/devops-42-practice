name: ci

on:
  push:
    branches: ["**"]
    tags: ["v*"]
    paths:
      - "src/**"
      - "pom.xml"
      - "Dockerfile"
      - ".github/workflows/**"
  pull_request:
    branches: ["**"]
    paths:
      - "src/**"
      - "pom.xml"
      - "Dockerfile"
      - ".github/workflows/**"
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
      - name: Build & Test (Maven)
        run: mvn -B -DskipTests=false clean package
      - name: Upload JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  docker:
    if: github.event_name != 'pull_request'
    needs: build-test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate tags & labels
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short,prefix={{branch}}-,enable={{is_branch}}
            type=semver,pattern={{version}},enable={{is_tag}}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Telegram (success)
        if: success()
        shell: bash
        run: |
          curl -sS "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=HTML \
            --data-urlencode $'text=<b>Build OK</b>\nRepo: <code>${{ github.repository }}</code>\nRef: <code>${{ github.ref }}</code>\nImage: <code>ghcr.io/${{ github.repository }}</code>\nTags:\n<code>${{ steps.meta.outputs.tags }}</code>\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'

      - name: Notify Telegram (failure)
        if: failure()
        shell: bash
        run: |
          curl -sS "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=HTML \
            --data-urlencode $'text=<b>Build FAILED</b>\nRepo: <code>${{ github.repository }}</code>\nRef: <code>${{ github.ref }}</code>\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
